/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.User;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Petra
 */
public class Application extends javax.swing.JFrame {

    private static final String HANDLE_MOVIES = "Handle movies";
    private static final String EDIT_PEOPLE = "Edit people";
    private static final String EDIT_MOVIES = "Edit movies";
    private static final String EDIT_GENRES = "Edit genres";
    private final User user;

    private static final String MOVIES_XML = "Movies.xml";

    Repository repository;
    List<Movie> selectedMovies;

    /**
     * Creates new form Application
     */
    public Application(User user) throws Exception {
        this.user = user;
        setTitle("Application");
        initComponents();
        initRepository();
        handleLookAndFeel();
        configurePanels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuLF = new javax.swing.JMenu();
        menuXml = new javax.swing.JMenu();
        miDownloadXml = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuFile.setMnemonic('F');
        menuFile.setText("File");

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuFile.add(miExit);

        jMenuBar1.add(menuFile);

        menuView.setMnemonic('V');
        menuView.setText("View");

        menuLF.setMnemonic('L');
        menuLF.setText("Look and feel");
        menuView.add(menuLF);

        jMenuBar1.add(menuView);

        menuXml.setText("Xml");

        miDownloadXml.setText("Download xml");
        miDownloadXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDownloadXmlActionPerformed(evt);
            }
        });
        menuXml.add(miDownloadXml);

        jMenuBar1.add(menuXml);

        menuHelp.setMnemonic('H');
        menuHelp.setText("Help");

        miAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        menuHelp.add(miAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        MessageUtils.showInformationMessage("Cinestar movies", "version 1.0");
    }//GEN-LAST:event_miAboutActionPerformed

    private void miDownloadXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDownloadXmlActionPerformed
        try {
            selectedMovies = repository.selectMovies();

            JAXBUtils.save(new MovieArchive(selectedMovies), MOVIES_XML);
            MessageUtils.showInformationMessage("Info", "Movies saved");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save movies");
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miDownloadXmlActionPerformed

    private void handleLookAndFeel() {
        ButtonGroup bgLookFeel = new ButtonGroup();
        Arrays.asList(UIManager.getInstalledLookAndFeels()).forEach(info -> {
            JRadioButtonMenuItem mi = new JRadioButtonMenuItem(info.getName());
            bgLookFeel.add(mi);
            menuLF.add(mi);
            if ("Nimbus".equals(info.getName())) {
                mi.setSelected(true);
            }
            mi.addActionListener(e -> {
                try {
                    UIManager.setLookAndFeel(info.getClassName());
                    SwingUtilities.updateComponentTreeUI(Application.this);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        });
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuLF;
    private javax.swing.JMenu menuView;
    private javax.swing.JMenu menuXml;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miDownloadXml;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void configurePanels() {
        if (user.isIsAdmin() == true) {
            tpContent.add(HANDLE_MOVIES, new AdminMoviesPanel());
        } else {
            tpContent.add(EDIT_MOVIES, new MoviesPanel());
            tpContent.add(EDIT_PEOPLE, new PeoplePanel());
            tpContent.add(EDIT_GENRES, new GenresPanel());
        }

    }
}
