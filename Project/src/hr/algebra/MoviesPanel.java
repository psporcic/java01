/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.GenreTransferable;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Petra
 */
public class MoviesPanel extends javax.swing.JPanel {

    private static final String DIR = "assets";

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLables;

    private final Set<Person> movieActors = new TreeSet<>();
    private final Set<Person> allActors = new TreeSet<>();

    private final Set<Person> movieDirectors = new TreeSet<>();
    private final Set<Person> allDirectors = new TreeSet<>();

    private final Set<Genre> movieGenres = new TreeSet<>();
    private final Set<Genre> allGenres = new TreeSet<>();

    private final DefaultListModel<Person> movieActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allActorsModel = new DefaultListModel<>();

    private final DefaultListModel<Person> movieDirectorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allDirectorsModel = new DefaultListModel<>();

    private final DefaultListModel<Genre> movieGenresModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();

    private Repository repository;

    private MovieTableModel movieTableModel;

    private Movie selectedMovie;
    private final List<Movie> movies = new ArrayList<>();

    /**
     * Creates new form MoviesPanel
     */
    public MoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIcon = new javax.swing.JLabel();
        lblAllActors = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lblTitleError = new javax.swing.JLabel();
        lblPublishedDate = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        lblPublishedDateError = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        lblOriginalTitle = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        lblOriginalTitleError = new javax.swing.JLabel();
        lblLength = new javax.swing.JLabel();
        tfLength = new javax.swing.JTextField();
        lblLengthError = new javax.swing.JLabel();
        lblLink = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lblReleaseDate = new javax.swing.JLabel();
        tfReleaseDate = new javax.swing.JTextField();
        lblReleaseDateError = new javax.swing.JLabel();
        lblLinkError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        tfPicturePath = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        lblIconError = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblActor = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        btnRemoveActorFromMovie = new javax.swing.JButton();
        btnRemoveDirectorFromMovie = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        lblDirectors = new javax.swing.JLabel();
        lblAllDirectors = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllDirectors = new javax.swing.JList<>();
        lblGenres = new javax.swing.JLabel();
        lblAllGenres = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        btnRemoveGenreFromMovie = new javax.swing.JButton();
        lblGenresError = new javax.swing.JLabel();
        lblActorsError = new javax.swing.JLabel();
        lblDirectorsError = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1192, 689));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/movieicon.jpg"))); // NOI18N

        lblAllActors.setText("All actors");

        lblTitleError.setForeground(java.awt.Color.red);

        lblPublishedDate.setText("Published date");

        tfPublishedDate.setName("Date"); // NOI18N

        lblPublishedDateError.setForeground(java.awt.Color.red);

        lblDescription.setText("Description");

        lblDescriptionError.setForeground(java.awt.Color.red);

        lblOriginalTitle.setText("Original title");

        lblOriginalTitleError.setForeground(java.awt.Color.red);

        lblLength.setText("Length");

        lblLengthError.setForeground(java.awt.Color.red);

        lblLink.setText("Link");

        lblReleaseDate.setText("Release date");

        lblReleaseDateError.setForeground(java.awt.Color.red);

        lblLinkError.setForeground(java.awt.Color.red);

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        jScrollPane2.setViewportView(taDescription);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        lblIconError.setForeground(java.awt.Color.red);

        lblTitle.setText("Title");

        lblActor.setText("Actors");

        jScrollPane3.setViewportView(lsAllActors);

        jScrollPane4.setViewportView(lsActors);

        btnRemoveActorFromMovie.setText("Remove actor from movie");
        btnRemoveActorFromMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorFromMovieActionPerformed(evt);
            }
        });

        btnRemoveDirectorFromMovie.setText("Remove director from movie");
        btnRemoveDirectorFromMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorFromMovieActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(lsDirectors);

        lblDirectors.setText("Directors");

        lblAllDirectors.setText("All directors");

        jScrollPane6.setViewportView(lsAllDirectors);

        lblGenres.setText("Genres");

        lblAllGenres.setText("All genres");

        jScrollPane7.setViewportView(lsGenres);

        jScrollPane8.setViewportView(lsAllGenres);

        btnRemoveGenreFromMovie.setText("Remove genre from movie");
        btnRemoveGenreFromMovie.setToolTipText("");
        btnRemoveGenreFromMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGenreFromMovieActionPerformed(evt);
            }
        });

        lblGenresError.setForeground(java.awt.Color.red);

        lblActorsError.setForeground(java.awt.Color.red);

        lblDirectorsError.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(lblPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(10, 10, 10)
                                                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblDescriptionError, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                                            .addComponent(lblTitleError, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                                            .addComponent(lblPublishedDateError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblLength, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblLink, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(tfLink)
                                                            .addComponent(tfReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(lblReleaseDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(tfLength, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(lblLengthError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGap(0, 126, Short.MAX_VALUE)))
                                .addGap(26, 26, 26))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblActor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(lblActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnRemoveActorFromMovie)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAllActors, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnChoose))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(lblIcon)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAllDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnRemoveDirectorFromMovie)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnRemoveGenreFromMovie))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAllGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblAllActors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblActor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnRemoveActorFromMovie))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblAllDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnRemoveDirectorFromMovie))
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIcon)
                                .addGap(38, 38, 38)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGenresError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblAllGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLength, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLengthError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLink, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblReleaseDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(236, 236, 236)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnChoose)
                            .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(btnRemoveGenreFromMovie)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "png", "jpg", "jpeg");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        setIcon(lblIcon, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                String path = uploadPicture();

                movieActors.clear();
                Arrays.asList(movieActorsModel.toArray()).forEach(a -> movieActors.add((Person) a));

                movieDirectors.clear();
                Arrays.asList(movieDirectorsModel.toArray()).forEach(d -> movieDirectors.add((Person) d));

                movieGenres.clear();
                Arrays.asList(movieGenresModel.toArray()).forEach(g -> movieGenres.add((Genre) g));

                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMAT),
                        taDescription.getText().trim(),
                        tfOriginalTitle.getText().trim(),
                        movieDirectors,
                        movieActors,
                        Integer.valueOf(tfLength.getText().trim()),
                        movieGenres,
                        path,
                        tfLink.getText().trim(),
                        tfReleaseDate.getText().trim());

                repository.createMovie(movie);
                movieTableModel.setMovies(repository.selectMovies());

                clearForm();

            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to add movie");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong", "Select movie");
            return;
        }
        if (formValid()) {
            try {
                if (!tfPicturePath.getText().equals(selectedMovie.getPicturePath())) {
                    if (selectedMovie.getPicturePath() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                    }
                    String path = uploadPicture();
                    selectedMovie.setPicturePath(path);
                }

                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMAT));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());

                movieDirectors.clear();
                Arrays.asList(movieDirectorsModel.toArray()).forEach(d -> movieDirectors.add((Person) d));
                selectedMovie.setDirectors(movieDirectors);

                movieActors.clear();
                Arrays.asList(movieActorsModel.toArray()).forEach(a -> movieActors.add((Person) a));
                selectedMovie.setActors(movieActors);

                selectedMovie.setLength(Integer.valueOf(tfLength.getText().trim()));

                movieGenres.clear();
                Arrays.asList(movieGenresModel.toArray()).forEach(g -> movieGenres.add((Genre) g));
                selectedMovie.setGenres(movieGenres);

                selectedMovie.setLink(tfLink.getText().trim());
                selectedMovie.setReleaseDate(tfReleaseDate.getText().trim());

                repository.updateMovie(selectedMovie.getId(), selectedMovie);
                movieTableModel.setMovies(repository.selectMovies());

                clearForm();

            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong", "Select movie");
            return;
        }
        if (MessageUtils.showConfirmDialog("Delete", "Really?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }

                repository.deleteMovie(selectedMovie.getId());
                movieTableModel.setMovies(repository.selectMovies());

                clearForm();

            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRemoveActorFromMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorFromMovieActionPerformed
        Person selectedActor = lsActors.getSelectedValue();
        if (selectedActor != null) {
            movieActorsModel.removeElement(selectedActor);
            movieActors.remove(selectedActor);
        } else {
            MessageUtils.showInformationMessage("Message", "Select actor");
        }
    }//GEN-LAST:event_btnRemoveActorFromMovieActionPerformed

    private void btnRemoveDirectorFromMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorFromMovieActionPerformed
        Person selectedDirector = lsDirectors.getSelectedValue();
        if (selectedDirector != null) {
            movieDirectorsModel.removeElement(selectedDirector);
            movieDirectors.remove(selectedDirector);
        } else {
            MessageUtils.showInformationMessage("Message", "Select director");
        }
    }//GEN-LAST:event_btnRemoveDirectorFromMovieActionPerformed

    private void btnRemoveGenreFromMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGenreFromMovieActionPerformed
        Genre selectedGenre = lsGenres.getSelectedValue();
        if (selectedGenre != null) {
            movieGenresModel.removeElement(selectedGenre);
            movieGenres.remove(selectedGenre);
        } else {
            MessageUtils.showInformationMessage("Message", "Select genre");
        }
    }//GEN-LAST:event_btnRemoveGenreFromMovieActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRemoveActorFromMovie;
    private javax.swing.JButton btnRemoveDirectorFromMovie;
    private javax.swing.JButton btnRemoveGenreFromMovie;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lblActor;
    private javax.swing.JLabel lblActorsError;
    private javax.swing.JLabel lblAllActors;
    private javax.swing.JLabel lblAllDirectors;
    private javax.swing.JLabel lblAllGenres;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDirectors;
    private javax.swing.JLabel lblDirectorsError;
    private javax.swing.JLabel lblGenres;
    private javax.swing.JLabel lblGenresError;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblIconError;
    private javax.swing.JLabel lblLength;
    private javax.swing.JLabel lblLengthError;
    private javax.swing.JLabel lblLink;
    private javax.swing.JLabel lblLinkError;
    private javax.swing.JLabel lblOriginalTitle;
    private javax.swing.JLabel lblOriginalTitleError;
    private javax.swing.JLabel lblPublishedDate;
    private javax.swing.JLabel lblPublishedDateError;
    private javax.swing.JLabel lblReleaseDate;
    private javax.swing.JLabel lblReleaseDateError;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsAllActors;
    private javax.swing.JList<Person> lsAllDirectors;
    private javax.swing.JList<Genre> lsAllGenres;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfLength;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfReleaseDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            loadAllActorsList();
            loadAllDirectorsList();
            loadAllGenresList();
            initDragNDrop();

        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfPublishedDate, taDescription, tfOriginalTitle, tfLength, tfLink, tfReleaseDate, tfPicturePath);
        errorLables = Arrays.asList(lblTitleError, lblPublishedDateError, lblDescriptionError, lblOriginalTitleError, lblLengthError, lblLinkError, lblReleaseDateError, lblIconError);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        movieTableModel = new MovieTableModel(repository.selectMovies());
        tbMovies.setModel(movieTableModel);
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));

        } catch (IOException ex) {
            Logger.getLogger(MoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Broken image");
        }

    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLables.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMAT);
                    errorLables.get(i).setText("");
                } catch (Exception e) {
                    errorLables.get(i).setText("X");
                    ok = false;
                }
            }
            if (lsDirectors.getModel().getSize() == 0) {
                lblDirectorsError.setText("X");
                ok = false;
            } else {
                lblDirectorsError.setText("");
            }
            if (lsActors.getModel().getSize() == 0) {
                lblActorsError.setText("X");
                ok = false;
            } else {
                lblActorsError.setText("");
            }
            if (lsGenres.getModel().getSize() == 0) {
                lblGenresError.setText("X");
                ok = false;
            } else {
                lblGenresError.setText("");
            }
        }
        return ok;
    }

    private String uploadPicture() throws IOException {
        String pictureUrl = tfPicturePath.getText().trim();
        String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String picturePath = DIR + File.separator + pictureName;
        FileUtils.copy(pictureUrl, picturePath);
        return picturePath;

    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLables.forEach(e -> e.setText(""));

        lblIcon.setIcon(new ImageIcon(getClass().getResource("/assets/movieicon.jpg")));

        movieActorsModel.clear();
        movieDirectorsModel.clear();
        movieGenresModel.clear();

        movieActors.clear();
        movieDirectors.clear();
        movieGenres.clear();

        lsAllActors.clearSelection();
        lsAllDirectors.clearSelection();
        lsAllGenres.clearSelection();

        selectedMovie = null;
    }

    private void showMovie() {
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);

        int id = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.selectMovie(id);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);

            }
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        taDescription.setCaretPosition(0);

    }

    private void fillForm(Movie movie) throws Exception {
        tfTitle.setText(movie.getTitle());
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMAT));
        taDescription.setText(movie.getDescription());
        tfOriginalTitle.setText(movie.getOriginalTitle());
        tfLength.setText(String.valueOf(movie.getLength()));
        tfLink.setText(movie.getLink());
        tfReleaseDate.setText(movie.getReleaseDate());

        if (movie.getPicturePath() != null) {
            tfPicturePath.setText(movie.getPicturePath());
            setIcon(lblIcon, new File(movie.getPicturePath()));
        }
        loadMovieActorsList();
        loadMovieDirectorsList();
        loadMovieGenresList();
    }

    private void loadAllActorsModel() {
        allActorsModel.clear(); //počisti model
        allActors.forEach(allActorsModel::addElement); //sve autore prebaci u model
        lsAllActors.setModel(allActorsModel); //toj listi setiraj model
    }

    private void loadMovieActorsModel() {
        movieActorsModel.clear();
        movieActors.forEach(movieActorsModel::addElement);
        lsActors.setModel(movieActorsModel);
    }

    private void loadAllDirectorsModel() {
        allDirectorsModel.clear();
        allDirectors.forEach(allDirectorsModel::addElement);
        lsAllDirectors.setModel(allDirectorsModel);
    }

    private void loadMovieDirectorsModel() {
        movieDirectorsModel.clear();
        movieDirectors.forEach(movieDirectorsModel::addElement);
        lsDirectors.setModel(movieDirectorsModel);
    }

    private void loadAllGenresModel() {
        allGenresModel.clear();
        allGenres.forEach(allGenresModel::addElement);
        lsAllGenres.setModel(allGenresModel);
    }

    private void loadMovieGenresModel() {
        movieGenresModel.clear();
        movieGenres.forEach(movieGenresModel::addElement);
        lsGenres.setModel(movieGenresModel);
    }

    private void loadAllActorsList() throws Exception {
        allActors.clear();
        allActors.addAll(repository.selectPeople());
        loadAllActorsModel();
    }

    private void loadAllDirectorsList() throws Exception {
        allDirectors.clear();
        allDirectors.addAll(repository.selectPeople());
        loadAllDirectorsModel();
    }

    private void loadAllGenresList() throws Exception {
        allGenres.clear();
        allGenres.addAll(repository.selectGenres());
        loadAllGenresModel();
    }

    private void loadMovieActorsList() throws Exception {
        movieActors.clear();
        movieActors.addAll(selectedMovie.getActors());
        loadMovieActorsModel();
    }

    private void loadMovieDirectorsList() throws Exception {
        movieDirectors.clear();
        movieDirectors.addAll(selectedMovie.getDirectors());
        loadMovieDirectorsModel();
    }

    private void loadMovieGenresList() throws Exception {
        movieGenres.clear();
        movieGenres.addAll(selectedMovie.getGenres());
        loadMovieGenresModel();
    }

    private void initDragNDrop() {
        //Actors
        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setTransferHandler(new ExportActorsHandler());

        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ImportActorsHandler());

        lsAllDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllDirectors.setDragEnabled(true);
        lsAllDirectors.setTransferHandler(new ExportDirectorsHandler());

        lsDirectors.setDropMode(DropMode.ON);
        lsDirectors.setTransferHandler(new ImportDirectorsHandler());

        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new ExportGenresHandler());

        lsGenres.setDropMode(DropMode.ON);
        lsGenres.setTransferHandler(new ImportGenresHandler());

    }

    private class ExportActorsHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsAllActors.getSelectedValue());
        }
    }

    private class ImportActorsHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {

            Transferable transferable = support.getTransferable();

            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

                if (movieActors.add(data)) {
                    loadMovieActorsModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }
    }

    private class ExportDirectorsHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsAllDirectors.getSelectedValue());

        }
    }

    private class ImportDirectorsHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {

            Transferable transferable = support.getTransferable();

            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

                if (movieDirectors.add(data)) {
                    loadMovieDirectorsModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }
    }

    private class ExportGenresHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());

        }
    }

    private class ImportGenresHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {

            Transferable transferable = support.getTransferable();

            try {
                Genre data = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);

                if (movieGenres.add(data)) {
                    loadMovieGenresModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }
    }
}
